// Numbas version: exam_results_page_options
{"name": "Chapter 8 Exercises", "metadata": {"description": "", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "duration": 0, "percentPass": 0, "showQuestionGroupNames": true, "showstudentname": true, "question_groups": [{"name": "Internal Forces", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Distributed Load", "Overhanging Beam"], "questions": [{"name": "Internal Force: distributed load", "extensions": ["geogebra", "quantities", "weh"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/distributedload_4GkDwAm.ggb", "/srv/numbas/media/question-resources/distributedload_4GkDwAm.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["bending moment", "distributed force", "internal force", "Mechanics", "mechanics", "shear", "Statics", "statics"], "metadata": {"description": "<p>Determine the internal shear force, normal force, and bending moment&nbsp;at a specified point.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet(525,225,false)}</p>\n<p>The frame supports a uniformly distributed load <em>w</em> =&nbsp;{load}. &nbsp;Member <em>AB</em> is {AB} long, member <em>BC</em> is {BC} long, and&nbsp;point <em>D</em>&nbsp;is located {BD} to the right of point <em>B.</em></p>", "advice": "<p><strong>Replace the distributed load with an equivalent concentrated load.</strong></p>\n<p style=\"padding-left: 30px;\">$W = w \\cdot \\overline{BC} = (\\var{load}) (\\var{BC}) = \\var{Q_W}$</p>\n<p style=\"padding-left: 30px;\">This force acts at the centroid of the area under the loading curve, i.e., the center of member <em>BC</em>.</p>\n<p><strong>Find the reactions <em>B</em> and &nbsp;<em>C</em>. &nbsp;</strong></p>\n<p style=\"padding-left: 30px;\">Note that member <em>AB</em> is a two-force member. &nbsp;&nbsp;Let $\\ell$ be the length of member <em>BC</em>.</p>\n<p style=\"padding-left: 30px;\">$\\begin{align}\\Sigma M_C &amp; = 0 &amp;\\Sigma F_x&nbsp;&amp;= 0 &amp;\\Sigma F_y &amp;= 0\\\\AB_y &nbsp;\\cdot \\ell&nbsp;&amp;= W \\cdot \\dfrac {\\ell}{2} &nbsp;&amp; &nbsp; C_x &amp;=AB_x &nbsp;&amp; C_y &amp;= W -AB_y&nbsp;\\\\AB \\sin \\var{abs(alpha)}&deg;&amp; = \\dfrac{ W }{2}&amp; C_x &amp;= AB \\cos \\var{abs(alpha)}&deg; &amp;&nbsp;C_y &amp;= W - AB&nbsp;\\sin \\var{abs(alpha)}&deg; \\\\ AB &amp;= \\var{display(Q_AB)}&nbsp;&amp; C_x &amp;= \\var{display(Q_cx)}\\var{if(F_AB[0]&gt;0,latex('\\\\leftarrow'),latex('\\\\rightarrow'))} &amp; C_y &amp;= \\var{display(Q_Cy)} \\uparrow \\end{align}$</p>\n<p><strong>Take an imaginary cut through <em>D</em> and draw a free body diagram of the right (or left) portion.</strong></p>\n<p>{applet(525,600,true)}</p>\n<p style=\"padding-left: 30px;\">There will be unknown internal shear ($V$), bending moment ($M_D$) and normal force&nbsp;($P$)&nbsp;at the cut.</p>\n<p style=\"padding-left: 30px;\">Assume that they act&nbsp;in the 'positive' directions for shear, normal force and bending moment. &nbsp;</p>\n<p style=\"padding-left: 30px;\">Note that the downward force on this portion&nbsp;of the beam&nbsp;($W'$) is&nbsp;due to the distributed force acting on this portion of the beam only.</p>\n<p style=\"padding-left: 60px;\">$W' = w \\cdot \\overline{DC} = (\\var{load}) (\\var{BC-BD}) = \\var{display(Q_W')}$</p>\n<p><strong>Solve for the internal forces at the cut.</strong></p>\n<p style=\"padding-left: 30px;\">$\\begin{align}\\Sigma M_D &amp; = 0 &amp;\\Sigma F_x &amp;= 0 &amp;\\Sigma F_y &amp;= 0\\\\M_D&nbsp; &amp;= \\simplify{-W'({CD/2}) + {sign(F_C[1])} C_y&nbsp;({CD})} &amp; &nbsp;P &amp;=\\simplify{&nbsp;- &nbsp;{sign(F_AB[0] )} &nbsp;C_x } &amp;&nbsp;V&nbsp;&amp;= W'-C_y\\\\&nbsp;&amp;= \\var{display(Q_MD)} &amp; &amp;= \\simplify{{display(Q_P)}} &amp; &amp;= \\var{display(Q_V)}\\end{align}$</p>\n<p></p>\n<p></p>", "rulesets": {}, "variables": {"sum": {"name": "sum", "group": "soon", "definition": "precround(F_AB+F_C+F_W,3)", "description": "<p>check</p>", "templateType": "anything"}, "Q_AB": {"name": "Q_AB", "group": "soon", "definition": "qty(abs(F_AB), units[0])", "description": "", "templateType": "anything"}, "F_W": {"name": "F_W", "group": "soon", "definition": "vector(0,-scalar(Q_W))", "description": "", "templateType": "anything"}, "CD": {"name": "CD", "group": "Ungrouped variables", "definition": "BC-BD", "description": "", "templateType": "anything"}, "F_C": {"name": "F_C", "group": "soon", "definition": "precround(-(F_AB+F_W),4)", "description": "", "templateType": "anything"}, "Q_Cy": {"name": "Q_Cy", "group": "soon", "definition": "qty(abs(F_C[1]), units[0])", "description": "", "templateType": "anything"}, "BD": {"name": "BD", "group": "Ungrouped variables", "definition": "qty(random(2..scalar(BC)-2),units[1])\n", "description": "", "templateType": "anything"}, "BC": {"name": "BC", "group": "Ungrouped variables", "definition": "qty(random(4..10#2),units[1])", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "['lb','ft']", "description": "", "templateType": "anything"}, "AB": {"name": "AB", "group": "Ungrouped variables", "definition": "qty(random(2..scalar(BC)/2),units[1])", "description": "<p>length of member AB</p>", "templateType": "anything"}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything"}, "alpha": {"name": "alpha", "group": "Ungrouped variables", "definition": "random(1,-1) random(25..60#5)", "description": "", "templateType": "anything"}, "Q_MD": {"name": "Q_MD", "group": "soon", "definition": "- Q_W' CD/2 + sign(F_C[1]) CD Q_Cy", "description": "<p>Q</p>", "templateType": "anything"}, "F_AB": {"name": "F_AB", "group": "soon", "definition": "precround(scalar(Q_W)/2 * vector(-1/tan(radians(alpha)), 1),4)", "description": "", "templateType": "anything"}, "Q_Cx": {"name": "Q_Cx", "group": "soon", "definition": "qty(abs(F_C[0]), units[0])", "description": "", "templateType": "anything"}, "Q_V": {"name": "Q_V", "group": "soon", "definition": "Q_W'-Q_Cy", "description": "", "templateType": "anything"}, "Q_W'": {"name": "Q_W'", "group": "soon", "definition": "CD Load\n", "description": "", "templateType": "anything"}, "Q_W": {"name": "Q_W", "group": "soon", "definition": "load * bc", "description": "<p>W</p>", "templateType": "anything"}, "Q_P": {"name": "Q_P", "group": "soon", "definition": "sign(F_C[0]) Q_Cx", "description": "<p>Q_P</p>", "templateType": "anything"}, "load": {"name": "load", "group": "Ungrouped variables", "definition": "qty(random(10..50#5), units[0\n  ]+\"/\"+units[1])", "description": "", "templateType": "anything"}, "appletX": {"name": "appletX", "group": "Ungrouped variables", "definition": "geogebra_file('distributedload.ggb',[\n  ['A', scalar(AB) * vector(-cos(radians(alpha)),sin(radians(alpha)))], \n  ['B', vector(0,0)], \n  ['C', vector(scalar(BC),0)], \n  ['D', vector(scalar(BD),0)],\n  ['fbd','false']\n  ])", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Points", "definition": "scalar(AB) * vector(-cos(radians(alpha)),sin(radians(alpha)))", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Points", "definition": "vector(0,0)", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Points", "definition": "vector(scalar(BC),0)", "description": "", "templateType": "anything"}, "D": {"name": "D", "group": "Points", "definition": "vector(scalar(BD),0)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["AB", "BC", "BD", "CD", "alpha", "units", "load", "debug", "appletX"], "variable_groups": [{"name": "soon", "variables": ["Q_W", "F_AB", "F_W", "F_C", "sum", "Q_AB", "Q_Cx", "Q_Cy", "Q_MD", "Q_W'", "Q_V", "Q_P"]}, {"name": "Points", "variables": ["A", "B", "C", "D"]}], "functions": {"display": {"parameters": [["q", "quantity"]], "type": "string", "language": "jme", "definition": "string(siground(q,4))"}, "applet": {"parameters": [["app_width", "number"], ["app_height", "number"], ["show_fbd", "boolean"]], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'kajdqajy',\n  width: app_width,\n  height: app_height\n};\n\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(false);\n  \n  function setGGBPoint(name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    var pt = question.scope.evaluate(name).value\n    app.setFixed(name,false,true);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n\n  setGGBPoint(\"A\");\n  setGGBPoint(\"B\");\n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  app.setVisible('fbd',show_fbd);\n  app.setValue('fbd',show_fbd);\n  app.setAxesVisible(false,false);\n  \n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "//question.signals.on('adviceDisplayed',function() {\n  //var app = question.applet.app;\n  //app.setValue('fbd',true);\n  //app.setValue('fbd',true);\n  \n//})", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the internal forces at point <em>D</em>. &nbsp;Use the standard convention for the meaning of positive shear, bending moment, and normal force.</p>\n<p>Normal force: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$P_D$ = [[0]]&nbsp;<span data-jme-visible=\"debug\">{Q_P}</span></p>\n<p></p>\n<p>Shear force: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$V_D$ = [[1]]&nbsp;<span data-jme-visible=\"debug\">{Q_V}</span></p>\n<p></p>\n<p>Bending Moment: &nbsp; &nbsp;$M_D$= [[2]]&nbsp;<span data-jme-visible=\"debug\">{Q_MD}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "P", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "Q_P", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "V", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "Q_V", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "M", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "Q_MD", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Internal force: overhanging beam", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["bending moment", "distributed load", "internal forces", "Mechanics", "mechanics", "shear", "Statics", "statics"], "metadata": {"description": "<p>Calculate reactions and shear and bending moment at a point for&nbsp;an overhanging beam with a constant&nbsp;or uniformly varying distributed load.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet(500,215,false)}</p>\n<p style=\"padding: 3px;\">The beam shown supports a<span data-jme-visible=\"Wa=Wb\"> uniformly distributed load of $w$ = {Wa}.</span><span data-jme-visible=\"Wa&lt;&gt;Wb\"> load that varies&nbsp;uniformly from {Wa} at the left end to {Wb} at the right end.</span>&nbsp;</p>\n<p style=\"padding-left: 30px;\">The lengths of the beam segments are $d_1$ = {display(d_1)}, $d_2$ = {display(d_2)}, and $d_3$ = {display(d_3)}.</p>", "advice": "<p><strong>1.</strong>&nbsp;<strong>Draw a FBD of the entire beam and find&nbsp;reactions at <em>A</em>&nbsp;and <em>C</em>.</strong></p>\n<p style=\"padding-left: 30px;\">{applet(500,566,true)}</p>\n<p style=\"padding-left: 30px;\"><strong>a. &nbsp;Replace distributed load with an equivalent concentrated load.</strong></p>\n<p style=\"padding-left: 30px;\">$W$ = {W_t}, &nbsp; &nbsp;&nbsp;$d$ = {display(dw)}</p>\n<p style=\"padding-left: 30px;\"><strong>b. &nbsp;Apply equilibrium equations.</strong></p>\n<p style=\"padding-left: 30px;\">$\\begin{align} \\Sigma M_A &amp;= 0 &amp; &nbsp;\\Sigma F_y &amp;=0 \\\\C \\cdot\\var{if(C[0]&lt;D[0],latex('d_1'),latex('(d_1+d_2)'))} &amp;= &nbsp;W&nbsp;\\cdot&nbsp;d &nbsp;&amp; &nbsp;\\simplify{{if(scalar(FA)&lt;0,-1,1)}&nbsp;A} + C &nbsp;&amp;= W = \\var{W_t}\\\\ C &amp;= \\var{display(FC)} \\uparrow &amp;&nbsp;A &amp;= \\var{display(abs(FA))} &nbsp;\\var{if(F_A[1]&gt;0,latex('\\\\uparrow'),latex('\\\\downarrow'))}\\end{align}$</p>\n<p><strong>2. Draw a FBD of the portion of the beam between <em>A</em> and <em>D</em> and find the shear and bending moment.</strong></p>\n<p style=\"padding-left: 30px;\"><strong>a. &nbsp;Determine the&nbsp;distributed load above point D.</strong></p>\n<p style=\"padding-left: 60px;\">Let $w_A$, $w_B$, and $w_D$ be the magnitude of the distributed load at points $A$, $B$, and $D$ respectively, and $L$ the length of the beam.</p>\n<p style=\"padding-left: 60px;\">Given: $w_A = \\var{wA},\\qquad w_B = \\var{wB}\\qquad L = (d_1 + d_2 + d_3) = \\var{L}$ &nbsp;</p>\n<p style=\"padding-left: 60px;\" data-jme-visible=\"wa=wb\">$w_D = \\var{display(wD)}$</p>\n<p style=\"padding-left: 60px;\" data-jme-visible=\"wa&lt;&gt;wb\">Using similar triangles: &nbsp;$w_D = w_A + \\dfrac{\\var{if(C[0]&gt;D[0],latex('d_1'),latex('(d_1+d_2)'))}}{L} \\left( w_B - w_A \\right) = \\var{display(wD)}$</p>\n<p style=\"padding-left: 30px;\"><strong>b. Replace distributed load with an equivalent concentrated load.</strong></p>\n<p style=\"padding-left: 60px;\">$W'$ = {display(W_p)}, &nbsp; &nbsp; $d'$ = {display(dw')}</p>\n<p style=\"padding-left: 30px;\"><strong>c. Apply equilibrium equations.</strong></p>\n<p style=\"padding-left: 60px;\">Let $\\ell = &nbsp;\\var{if(C[0]&gt;D[0],latex('d_1'),latex('d_1+d_2'))} = \\var{display(Dx)}\\text{, and} \\qquad d_\\perp = (\\ell - d') = \\var{display(Dx - dw')}$</p>\n<p style=\"padding-left: 60px;\">$\\begin{align} \\Sigma M_D &amp;= 0 &amp; \\Sigma F_y &amp;=0 \\\\&nbsp;\\simplify{{if(scalar(FA)&lt;0,1,-1)} A} \\ell + W' d_\\perp \\var{if(Cx &lt; Dx, latex('+C d_2'),'')} + M_D&amp;= 0&nbsp;&amp; \\simplify{{if(scalar(FA)&lt;0,-1,1)} A} \\var{if(Cx &lt; Dx, latex('+ C'),'')} - W' -&nbsp;V&nbsp;&amp;=0 \\\\ M_D &amp;= \\simplify{{if(scalar(FA)&gt;0,1,-1)} A} \\ell -&nbsp;W' d_\\perp&nbsp;\\var{if(Cx &lt; Dx, latex('C d_2'),'')}&nbsp;&amp; V&nbsp;&amp;= \\simplify{{if(scalar(FA)&lt;0,-1,1) }A} \\var{if(Cx &lt; Dx, latex('+ C'),'')} - W'&nbsp;\\\\ &amp;= \\var{display(M_D)}&nbsp;&amp; V &amp;= \\var{display(FV)}&nbsp;\\end{align}$</p>\n<p style=\"padding-left: 60px;\"></p>\n<p>=</p>", "rulesets": {}, "variables": {"F_Wt": {"name": "F_Wt", "group": "vectors", "definition": "vector(0,-scalar(W_t))", "description": "", "templateType": "anything"}, "L": {"name": "L", "group": "Quantities", "definition": "qty(random(6,8,12,16,20,24),units[1])", "description": "<p>overall length of the beam.</p>", "templateType": "anything"}, "d_2": {"name": "d_2", "group": "Quantities", "definition": "abs(Dx-Cx)", "description": "<p>length of second beam segment</p>", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['N','m'],['lb','ft'])", "description": "", "templateType": "anything"}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "Vector(0,0)\n", "description": "", "templateType": "anything"}, "F_V": {"name": "F_V", "group": "vectors", "definition": "(F_A + F_Wp + if(C[0]<D[0], F_C, vector(0,0)))", "description": "", "templateType": "anything"}, "F_Wp": {"name": "F_Wp", "group": "vectors", "definition": "vector(0,-scalar(W_p))", "description": "", "templateType": "anything"}, "Dx": {"name": "Dx", "group": "Quantities", "definition": "D[0]/12 Bx", "description": "<p>x position of point d (cut)</p>", "templateType": "anything"}, "Ax": {"name": "Ax", "group": "Quantities", "definition": "qty(0,units[1])", "description": "<p>x position of point A</p>", "templateType": "anything"}, "Bx": {"name": "Bx", "group": "Quantities", "definition": "L", "description": "<p>x position of point B (right end)</p>", "templateType": "anything"}, "h2": {"name": "h2", "group": "Quantities", "definition": "abs(W_a-W_b) Wmax", "description": "<p>height of triangular portion of load</p>", "templateType": "anything"}, "FA": {"name": "FA", "group": "Quantities", "definition": "W_t * (Cx-dw) /Cx", "description": "<p>Force at A, signed</p>", "templateType": "anything"}, "FC": {"name": "FC", "group": "Quantities", "definition": "W_t dw/Cx", "description": "<p>Force at roller C, always up</p>", "templateType": "anything"}, "FV": {"name": "FV", "group": "Quantities", "definition": "FA - W_p + if(C[0]<D[0],FC,qty(0, units[0]))", "description": "<p>shear force at D, Signed</p>", "templateType": "anything"}, "w_B": {"name": "w_B", "group": "Ungrouped variables", "definition": "random(0..2#0.5)", "description": "", "templateType": "anything"}, "W_p": {"name": "W_p", "group": "Quantities", "definition": "(Wa + Wd)/2 Dx", "description": "<p>partial load to the left of point d</p>", "templateType": "anything"}, "M_D": {"name": "M_D", "group": "Quantities", "definition": "FA Dx - W_p * (Dx - dw') + if(Cx<Dx,FC,qty(0,units[0])) d_2", "description": "<p>moment at D, signed</p>\n<p>&minus;\ud835\udc34\u2113&minus;\ud835\udc4a&prime;\ud835\udc51&perp;&minus;\ud835\udc36\ud835\udc512</p>", "templateType": "anything"}, "dw": {"name": "dw", "group": "Quantities", "definition": "(Wa / 6 + Wb  /3 ) L L /W_T", "description": "<p>distance to equivalent load's centroid for whole beam</p>", "templateType": "anything"}, "W_t": {"name": "W_t", "group": "Quantities", "definition": "(Wa + Wb)/2 L", "description": "<p>Equivalent load on beam, down</p>", "templateType": "anything"}, "F_A": {"name": "F_A", "group": "vectors", "definition": "- (F_C + F_Wt)", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "vector(random(2..10#2),0)", "description": "", "templateType": "anything"}, "Wmax": {"name": "Wmax", "group": "Quantities", "definition": "qty(random(100,200,400,500,800,1000),units[0] +\"/\" + units[1])", "description": "<p>Random load value which gets scaled geogebra_values w_a and w_b to make actual loads Wa and Wb.</p>", "templateType": "anything"}, "h1": {"name": "h1", "group": "Quantities", "definition": "min(W_a,W_b) Wmax", "description": "<p>height of rectangular portion of the load</p>", "templateType": "anything"}, "Wd": {"name": "Wd", "group": "Quantities", "definition": "wA +  (wb-wa) * if(C[0]>D[0],d_1, d_1+d_2) / L ", "description": "<p>distributed load value at point D</p>", "templateType": "anything"}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "vector(12,0)\n", "description": "", "templateType": "anything"}, "w_A": {"name": "w_A", "group": "Ungrouped variables", "definition": "random(0..2#0.5)", "description": "", "templateType": "anything"}, "Wb": {"name": "Wb", "group": "Quantities", "definition": "Wmax w_b", "description": "<p>distributed load value at point A, right end.</p>", "templateType": "anything"}, "F_C": {"name": "F_C", "group": "vectors", "definition": "vector(0,scalar(FC))", "description": "", "templateType": "anything"}, "dw'": {"name": "dw'", "group": "Quantities", "definition": "(Wa / 6 + Wd  /3 ) Dx Dx /W_p", "description": "<p>distance from A to partial load W_p</p>", "templateType": "anything"}, "Cx": {"name": "Cx", "group": "Quantities", "definition": "C[0]/12 Bx\n ", "description": "<p>x position of point&nbsp;C (roller)</p>", "templateType": "anything"}, "Wa": {"name": "Wa", "group": "Quantities", "definition": "Wmax w_a", "description": "<p>distributed load value at point A, left end</p>", "templateType": "anything"}, "D": {"name": "D", "group": "Ungrouped variables", "definition": "vector(random(2..10#2),0)", "description": "", "templateType": "anything"}, "d_1": {"name": "d_1", "group": "Quantities", "definition": "qty(min(scalar(Cx),scalar(Dx)),units[1])", "description": "<p>length of first beam segment.</p>", "templateType": "anything"}, "ggb_points": {"name": "ggb_points", "group": "Ungrouped variables", "definition": "[\n  ['C',C],['D',D],['w_A',w_a],['w_B',w_b], ['fbd','false']\n]", "description": "", "templateType": "anything"}, "d_3": {"name": "d_3", "group": "Quantities", "definition": "Bx-d_1-d_2", "description": "<p>length of third beam segment</p>", "templateType": "anything"}}, "variablesTest": {"condition": "abs(C[0]-D[0])>1 and  // not too close to each other\nw_a+w_b <> 0 and // must not both be zero = no load\nD[0] > 2 // not too close to end", "maxRuns": 100}, "ungrouped_variables": ["A", "B", "C", "D", "w_A", "w_B", "ggb_points", "units", "debug"], "variable_groups": [{"name": "Quantities", "variables": ["L", "Ax", "Bx", "Cx", "Dx", "d_1", "d_2", "d_3", "Wmax", "Wa", "Wd", "Wb", "h1", "h2", "dw", "W_t", "FC", "FA", "dw'", "W_p", "FV", "M_D"]}, {"name": "vectors", "variables": ["F_C", "F_Wt", "F_A", "F_Wp", "F_V"]}], "functions": {"display": {"parameters": [["q", "quantity"]], "type": "string", "language": "jme", "definition": "string(siground(q,4))"}, "applet": {"parameters": [["app_width", "number"], ["app_height", "number"], ["show_fbd", "boolean"]], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'susdzdmr',\n  width: app_width,\n  height: app_height\n};\n//geogebra_applet('susdzdmr') old ggb file\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(false);\n  \n  function setGGBPoint(name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    var pt = question.scope.evaluate(name).value\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  \n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  app.setValue('fbd',show_fbd);\n  app.setAxesVisible(false,false);\n  app.enableShiftDragZoom(false);\n  setGGBNumber(\"w_A\");\n  setGGBNumber(\"w_B\");\n  \n \n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "showfbds": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'susdzdmr',\n  width: 500,\n  height: 500\n};\n//geogebra_applet('susdzdmr') old ggb file\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(false);\n  \n  function setGGBPoint(name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    var pt = question.scope.evaluate(name).value\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  \n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  app.setValue('fbd',true);\n  app.setAxesVisible(false,false);\n  app.enableShiftDragZoom(false);\n  setGGBNumber(\"w_A\");\n  setGGBNumber(\"w_B\");\n  \n \n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the reactions at pin $A$ and roller $C$. &nbsp;Let positive values indicate upward forces.</p>\n<p>$A$ =&nbsp;[[0]] <span data-jme-visible=\"debug\">{display(FA)}</span></p>\n<p>$C$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{display(FC)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$F_A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FA", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$F_C$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FC", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Internal Load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the&nbsp;internal shear and bending moment at a section passing through point $D$. Use the standard convention for the meaning of positive shears and bending moments.&nbsp;</p>\n<p>$V_D$ &nbsp;=&nbsp;[[0]] <span data-jme-visible=\"debug\">{display(FV)}</span></p>\n<p>$M_D$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{display(M_D)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V$", "marks": "15", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FV", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_D$", "marks": "15", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "M_D", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}, {"name": "Shear and Bending Moment Diagrams", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Arbitrary parabolic loading ", "Concentrated forces", "Distributed loads", "Concentrated moments", "Combined loads"], "questions": [{"name": "V-M 5a: Arbitrary parabolic loading - No diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "Shear and bending moment diagram for a beam loaded with a parabolic distributed load described with a loading function.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A {qty(beamlen, units[0])} long, simply-supported beam is subjected to a parabolic loading $w(x)$ in {units[1]} / {units[0]}&nbsp;as given below.</p>\n<p>Sketch the corresponding shear and bending moment.</p>\n<p>{applet}</p>\n<p></p>", "advice": "<p>Given $w(x)$ and beam length $L$,</p>\n<p>1. &nbsp;Find load $W= \\int_0^L w(x)\\; dx$</p>\n<p>2. &nbsp;Find $Q_y = \\int_0^L x w(x)\\;dx$</p>\n<p>3. &nbsp;Find centroid $\\bar{x}=\\frac{Q_y}{W}$</p>\n<p>4. &nbsp;Take moments about $A$ and $B$ to find reactions.</p>\n<p>5. &nbsp;Integrate $V(x) = \\int w(x)\\; dx$ to get the shear function.</p>\n<p style=\"padding-left: 30px;\">Maximum shear occurs where $d V&nbsp;/d x = -w(x) = 0$</p>\n<p style=\"padding-left: 30px;\">Evaluate $V(x)$ at point of maximum shear.</p>\n<p>6. &nbsp;Integrate $M(x) = \\int V(x)\\; dx$ to get moment function. &nbsp;</p>\n<p style=\"padding-left: 30px;\">Maximum moment occurs where $dM/dx = V = 0$</p>\n<p style=\"padding-left: 30px;\">Evaluate $M(x)$ at point of maximum bending moment.</p>\n<p><em>Don't forget to evaluate the constant of integration when deriving the shear and bending moment functions.</em></p>", "rulesets": {}, "variables": {"beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": "2 random(5..10)", "description": "", "templateType": "anything"}, "range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+sort(take(4,x,x,shuffle(2..(beamLen -2)#2))) + [beamLen]", "description": "", "templateType": "anything"}, "applet": {"name": "applet", "group": "Ungrouped variables", "definition": "geogebra_function()\n\n", "description": "", "templateType": "anything"}, "A'": {"name": "A'", "group": "Ungrouped variables", "definition": "random(-10..10)", "description": "", "templateType": "anything"}, "B'": {"name": "B'", "group": "Ungrouped variables", "definition": "random(-10..10)", "description": "", "templateType": "anything"}, "C'": {"name": "C'", "group": "Ungrouped variables", "definition": "random(-10..10)", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Unnamed group", "definition": "vector(0,0)// vector(0,random(-10..10))", "description": "<p>Leftmost point on loading curve (x, w(x))</p>", "templateType": "anything"}, "B": {"name": "B", "group": "Unnamed group", "definition": "vector(beamLen/2,-random(5..10))\n//vector(beamLen,random(-10..10))", "description": "<p>rightmost&nbsp;point on loading curve (x, w(x))</p>", "templateType": "anything"}, "C": {"name": "C", "group": "Unnamed group", "definition": "vector(beamlen-random(2,4), random(-2..10))\n//vector(random(2..beamLen-2#2),random(-10..10))", "description": "<p>interior&nbsp;point on loading curve (x, w(x))</p>", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["beamLen", "applet", "range", "A'", "B'", "C'", "units"], "variable_groups": [{"name": "Unnamed group", "variables": ["A", "B", "C"]}], "functions": {"geogebra_function": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'r8hqdxsg',\n  width:560,\n  height:600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n  }\n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  \n  setGGBNumber('beamLen');\n  setGGBPoint(\"A'\", \"A\");\n  setGGBPoint(\"B'\", \"B\");\n  setGGBPoint(\"C'\", \"C\");\n  app.evalCommand(\"RunClickScript(Rescale)\");\n  \n  app.setVisible(\"A'\", false, false);\n  app.setVisible(\"B'\", false, false);\n  app.setVisible(\"C'\", false, false);\n  \n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-35);\n\n  app.setVisible(\"showR\", false, false);\n  app.setVisible(\"showV\", false, false); \n  app.setVisible(\"showM\", false, false);\n  app.setVisible(\"showMax\", false, false);\n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n  \n  app.setVisible(\"NewProblem\", false, false);\n  app.setVisible(\"Rescale\", false, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  \n \n\n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "": {"parameters": [], "type": "anything", "language": "jme", "definition": ""}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  var app = question.scope.variables.applet.app\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n})\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the reactions at the ends.</p>\n<p>$A = $ [[0]]&nbsp;$\\qquad B=$&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(value(applet,\"F_A\"),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(value(applet,\"F_B\"),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum internal loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "V_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  value(applet,safe(\"V_{max}\"))\n\nVmin:\n   value(applet,safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "M_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n  value(applet,safe(\"M_{max}\"))\n\nMmin:\n   value(applet,safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[0] + ' ' + units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 1a: Concentrated forces, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM1_cwT2ujZ.ggb", "/srv/numbas/media/question-resources/VM1_cwT2ujZ.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb"], "metadata": {"description": "<p>Shear and Bending Moment diagram for a beam with several concentrated loads. &nbsp;Student can't see V &amp; M diagrams a hints.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Draw&nbsp;the shear and bending moment for the beam and loading shown. &nbsp;The beam is {qty(beamlen,units[0])} long. &nbsp;</p>\n<p>{applet()}</p>\n<p></p>\n<p></p>", "advice": "", "rulesets": {}, "variables": {"range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+ [beamLen] +sort(take(3,x,x,shuffle(2..(beamLen -2)#2)))", "description": "", "templateType": "anything"}, "beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": "2 random(5..10)", "description": "", "templateType": "anything"}, "applet": {"name": "applet", "group": "Ungrouped variables", "definition": "advice()", "description": "<p></p>\n<p>//geogebra_file('resources/question-resources/VM1_cwT2ujZ.ggb', [<br />geogebra_applet('qnhnawam', [<br /> \"F_C\": [definition: FC, visible: false],<br /> \"F_D\": [definition: FD, visible: false],<br /> \"F_E\": [definition: FE, visible: false],<br /> \"showR\": [visible: false],<br /> \"showV\": [visible: true],<br /> \"showM\": [visible: true],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + range[0] + ',0)',<br /> 'SetCoords(B,' + range[4] + ',0)',<br /> 'SetCoords(C,' + range[1] + ',0)',<br /> 'SetCoords(D,' + range[2] + ',0)',<br /> 'SetCoords(E,' + range[3] + ',0)',<br /> 'RunClickScript[unitToggle]'<br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> <br /> \"units_d\":[definition: '\"' + units[0] +'\"'],<br /> \"units_f\":[definition: '\"' + units[1] +'\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>", "templateType": "anything"}, "FE": {"name": "FE", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything"}, "FC": {"name": "FC", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything"}, "FD": {"name": "FD", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["beamLen", "range", "applet", "FE", "FC", "FD", "units"], "variable_groups": [], "functions": {"applet": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qnhnawam',\n  width: 560,\n  height: 600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('beamLen');\n  setGGBNumber('F_C',\"FC\");\n  setGGBNumber('F_D',\"FD\");\n  setGGBNumber('F_E',\"FE\");\n  \n  function setPoint(name, index) {\n  var x = question.unwrappedVariables.range[index]\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  }\n  \n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-30);\n  \n  setPoint('A',0);\n  setPoint('B',1);\n  setPoint('C',2);\n  setPoint('D',3);\n  setPoint('E',4);\n  \n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  app.evalCommand(\"RunClickScript(Rescale)\");\n  \n  app.setVisible(\"NewProblem\", false, false);\n  app.setVisible(\"Rescale\", false, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return Numbas.exam.currentQuestion.applet.app.getValue(val)"}, "advice": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qnhnawam'\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('beamLen');\n  setGGBNumber('F_C',\"FC\");\n  setGGBNumber('F_D',\"FD\");\n  setGGBNumber('F_E',\"FE\");\n  \n  function setPoint(name, index) {\n  var x = question.unwrappedVariables.range[index]\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  }\n  \n  setPoint('A',0);\n  setPoint('B',1);\n  setPoint('C',2);\n  setPoint('D',3);\n  setPoint('E',4);\n  \n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  app.evalCommand(\"RunClickScript(Rescale)\");\n  \n  app.setVisible(\"NewProblem\", false, false);\n  app.setVisible(\"Rescale\", false, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  var app = Numbas.exam.currentQuestion.applet.app;\n  \n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  //app.setVisible(\"F_C\",true,true);\n  //app.setVisible(\"F_D\",true,true);\n  //app.setVisible(\"F_E\",true,true);\n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n})\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are the reactions at the pin and roller supports?</p>\n<p>$A$ = &nbsp;[[0]]&nbsp; $\\qquad B$ =&nbsp;[[1]]&nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(safe(\"F_A\")),units[1])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(safe(\"F_B\")),units[1])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "Vmax", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  getGGB(safe(\"V_{max}\"))\n\nVmin:\n   getGGB(safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "Mmax", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n getGGB(safe(\"M_{max}\"))\n\nMmin:\n   getGGB(safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 3a: Distributed loads, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM3.ggb", "/srv/numbas/media/question-resources/VM3.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "Mechanics", "mechanics", "shear and bending moment", "statics", "Statics"], "metadata": {"description": "Draw Shear and Bending Moment Diagram for a beam with two uniformly distributed loads.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Draw&nbsp;the shear and bending moment for the {beamlen} {units[0]} &nbsp;beam and loading shown.&nbsp;</p>\n<p>{applet()}</p>\n<p></p>", "advice": "", "rulesets": {}, "variables": {"range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+sort(take(4,x,x,shuffle(2..(beamLen -2)#2))) + [beamLen]", "description": "", "templateType": "anything"}, "beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": " random(12..20#2)", "description": "", "templateType": "anything"}, "applet": {"name": "applet", "group": "Ungrouped variables", "definition": "applet()\n", "description": "<p>geogebra_applet('q7zdsmu3', [<br /> \"showR\": [definition: 'false', visible: false],<br /> \"showV\": [definition: 'false', visible: true],<br /> \"showM\": [definition: 'false', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)',<br /> 'SetCoords(F,' + F + ',0)'<br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"F\":[fixed: true],<br /> \"w_1\": [definition: w_1, visible: false],<br /> \"w_2\": [definition: w_2, visible: false],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>", "templateType": "anything"}, "A": {"name": "A", "group": "Unnamed group", "definition": "range[0]", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Unnamed group", "definition": "if(random(0..100)>50, range[0],range[1])", "description": "<p>Sometimes put point B at the left end</p>", "templateType": "anything"}, "C": {"name": "C", "group": "Unnamed group", "definition": "if(random(0..100)<25, range[3],range[2])", "description": "", "templateType": "anything"}, "D": {"name": "D", "group": "Unnamed group", "definition": "range[3]", "description": "", "templateType": "anything"}, "EE": {"name": "EE", "group": "Unnamed group", "definition": "if(random(0..100)<40, range[5],range[4])", "description": "<p>sometimes put E at the right end</p>\n<p></p>", "templateType": "anything"}, "F": {"name": "F", "group": "Unnamed group", "definition": "range[5]", "description": "<p>at the right end</p>", "templateType": "anything"}, "units": {"name": "units", "group": "Unnamed group", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything"}, "w_1": {"name": "w_1", "group": "Unnamed group", "definition": "random(-100..100#10 except 0)", "description": "", "templateType": "anything"}, "w_2": {"name": "w_2", "group": "Unnamed group", "definition": "random(-100..100#10 except 0)", "description": "", "templateType": "anything"}, "points": {"name": "points", "group": "Ungrouped variables", "definition": "sort(distinct([A,B,C,D,EE,F]))", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "C <> D", "maxRuns": 100}, "ungrouped_variables": ["beamLen", "range", "applet", "points"], "variable_groups": [{"name": "Unnamed group", "variables": ["A", "B", "C", "D", "EE", "F", "units", "w_1", "w_2"]}], "functions": {"applet": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'q7zdsmu3',\n  width: 560,\n  height: 600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n \n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('w_1');\n  setGGBNumber('w_2');\n  \n  function setPoint(name,nname=name) {\n  var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname))\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  app.setFixed(name,true);\n  }\n  \n  setPoint('A');\n  setPoint('B');\n  setPoint('C');\n  setPoint('D');\n  setPoint('E','EE');\n  setPoint('F');\n  \n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-35);\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}, "advice": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'q7zdsmu3'\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n \n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('w_1');\n  setGGBNumber('w_2');\n  \n  function setPoint(name,nname=name) {\n  var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname))\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  app.setFixed(name,true);\n  }\n  \n  setPoint('A');\n  setPoint('B');\n  setPoint('C');\n  setPoint('D');\n  setPoint('E','EE');\n  setPoint('F');\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", true, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  var app = Numbas.exam.currentQuestion.applet.app;\n  \n  app.setVisible('showR', true);\n  app.setVisible('showV', true);\n  app.setVisible('showM', true);\n  app.setVisible('showMax', true);\n  app.setVisible(\"textShowSoln\", true, false);\n  \n  app.setValue('showMax',true);\n  app.setValue('showR',true);\n  app.setValue('showV',true);\n  app.setValue('showM',true);\n})\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are &nbsp;the reactions at $A$ and $F$?</p>\n<p>$A = $ &nbsp;[[0]] $\\qquad F = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(safe(\"F_A\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "F", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(safe(\"F_F\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "V_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  getGGB(safe(\"V_{max}\"))\n\nVmin:\n  getGGB(safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "M_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n getGGB(safe(\"M_{max}\"))\n\nMmin:\n   getGGB(safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 2a: Concentrated moments, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM2.ggb", "/srv/numbas/media/question-resources/VM2.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb"], "metadata": {"description": "Shear and Bending Moment diagram for a cantilevered beam loaded with concentrated forces and moments.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A {qty(beamLen,&nbsp;units[0])} long cantilevered beam is supported by a fixed support at $A$ and subjected to the loading shown.</p>\n<p>Draw&nbsp;the corresponding shear and bending moment diagram.</p>\n<p>{applet()}</p>\n<p></p>", "advice": "", "rulesets": {}, "variables": {"beamLen": {"name": "beamLen", "group": "Unnamed group", "definition": "random(12..20#2)", "description": "", "templateType": "anything"}, "applet": {"name": "applet", "group": "Ungrouped variables", "definition": "applet()", "description": "<p>geogebra_applet('wzynat8x', [<br /> \"P_C\":[definition: P_C, visible: false],<br /> \"F_B\":[definition: F_B, visible: false],<br /> \"M_D\":[definition: M_D, visible: false],<br /> \"showR\": [visible: false],<br /> \"showV\": [visible: true],<br /> \"showM\": [visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)' <br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"'],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')],<br /> \"points\": [definition: points]</p>\n<p>])</p>\n<p></p>", "templateType": "anything"}, "P_C": {"name": "P_C", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything"}, "M_D": {"name": "M_D", "group": "Ungrouped variables", "definition": "random(-200..200#10 except 0)", "description": "", "templateType": "anything"}, "F_B": {"name": "F_B", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Unnamed group", "definition": "ends[0]", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Unnamed group", "definition": "ends[1]", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Unnamed group", "definition": "random(midpoints)", "description": "", "templateType": "anything"}, "D": {"name": "D", "group": "Unnamed group", "definition": "random(midpoints)", "description": "", "templateType": "anything"}, "EE": {"name": "EE", "group": "Unnamed group", "definition": "ends[0]", "description": "", "templateType": "anything"}, "points": {"name": "points", "group": "Unnamed group", "definition": "sort(distinct([A,B,C,D,EE]))", "description": "<p>used by scale function in geogebra</p>", "templateType": "anything"}, "ends": {"name": "ends", "group": "Unnamed group", "definition": "shuffle([0,beamLen])", "description": "<p>left or right ends&nbsp;</p>", "templateType": "anything"}, "midpoints": {"name": "midpoints", "group": "Unnamed group", "definition": "shuffle(2..beamLen-2#2)", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["applet", "P_C", "M_D", "F_B", "units"], "variable_groups": [{"name": "Unnamed group", "variables": ["beamLen", "A", "B", "C", "D", "EE", "points", "ends", "midpoints"]}], "functions": {"applet": {"parameters": [], "type": "anything", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'wzynat8x',\n  width:560,\n  height:600\n};\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(1, true);\n  app.setAxesVisible(true,false);\n  app.enableShiftDragZoom(false);\n  \n  function setGGBPoint(name, nname=name) {\n    // moves point in GGB to Numbas value\n    var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n    app.setFixed(name,false,false);\n    app.setCoords(name, x, 0);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-32);\n  \n  \n  setGGBPoint(\"A\");\n  setGGBPoint(\"B\");\n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  setGGBPoint(\"E\",\"EE\");\n  \n  setGGBNumber(\"P_C\");\n  setGGBNumber(\"F_B\");\n  setGGBNumber(\"M_D\");\n  \n  app.setVisible(\"P_C\",false);\n  app.setVisible(\"F_B\",false);\n  app.setVisible(\"M_D\",false);\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  var app= Numbas.exam.currentQuestion.applet.app;\napp.setVisible(\"textShowSoln\", true, false);\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n})\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the reactions at $A$.</p>\n<p>$A = $ [[0]]&nbsp;$\\qquad M_A = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(\"F_A\"),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(getGGB(\"M_A\"),units[1] + ' ' + units[0])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0]+\" \" +  units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  getGGB(safe(\"V_{max}\"))\n\nVmin:\n   getGGB(safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n  getGGB(safe(\"M_{max}\"))\n\nMmin:\n   getGGb(safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 4a: Combined loads, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM4.ggb", "/srv/numbas/media/question-resources/VM4.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "mechanics", "Mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "Shear and bending moment diagram for a beam loaded with concentrated force and a uniformly distributed force.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A {qty(beamlen, units[0])} long beam is subjected to a {abs(P_C)} {units[1]} concentrated force $P$ and a {abs(w)} {units[1]}/{units[0]} distributed load&nbsp;$w$ as shown.&nbsp; &nbsp;</p>\n<p>Draw&nbsp;the corresponding shear and bending moment. &nbsp;</p>\n<p>{applet()}</p>\n<p></p>", "advice": "", "rulesets": {}, "variables": {"beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": "random(12..20#2)", "description": "", "templateType": "anything"}, "range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+sort(take(3,x,x,shuffle(2..(beamLen -2)#2))) + [beamLen]", "description": "", "templateType": "anything"}, "applet": {"name": "applet", "group": "Ungrouped variables", "definition": "applet()", "description": "<p>geogebra_applet('qqv7vew7', [<br /> \"showR\": [definition: 'false', visible: false],<br /> \"showV\": [definition: 'false', visible: true],<br /> \"showM\": [definition: 'false', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)'<br /> <br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> <br /> \"w\": [definition: w, visible: false],<br /> \"P_C\": [definition: P_C, visible: false],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"textMax\": [visible: false],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>\n<p></p>", "templateType": "anything"}, "dots": {"name": "dots", "group": "Ungrouped variables", "definition": "[if(A<>0,0,random(0..beamLen#2))]+ \n[if(B<> beamLen, beamLen, random(0..BeamLen#2))]+\n[random(0..BeamLen/2#2)]", "description": "", "templateType": "anything"}, "P_C": {"name": "P_C", "group": "Ungrouped variables", "definition": "random(-200..200#10 except 0)", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "random(0..beamLen/2#2)", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "beamlen-random(0..beamLen/2#2)", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "dots[0]", "description": "", "templateType": "anything"}, "D": {"name": "D", "group": "Ungrouped variables", "definition": "dots[1]", "description": "", "templateType": "anything"}, "EE": {"name": "EE", "group": "Ungrouped variables", "definition": "dots[2]", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything"}, "w": {"name": "w", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "A< beamLen/2 and  B > beamLen/2 and C <> A and C <> B and D <> EE and abs(A-B) >= 6\n// Reactions in two places, load not on top of reactions, and distributed load starts and ends ", "maxRuns": 100}, "ungrouped_variables": ["beamLen", "range", "applet", "dots", "A", "B", "C", "D", "EE", "P_C", "units", "w"], "variable_groups": [], "functions": {"applet": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qqv7vew7',\n  width:560,\n  height:600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n \n   app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-32);\n  \n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('w');\n  setGGBNumber('P_C');\n  \n  function setPoint(name,nname=name) {\n  var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname))\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  app.setFixed(name,true);\n  }\n  \n  setPoint('A');\n  setPoint('B');\n  setPoint('C');\n  setPoint('D');\n  setPoint('E','EE');\n\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  var app = Numbas.exam.currentQuestion.applet.app;\n  \n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  //app.setVisible(\"F_C\",true,true);\n  //app.setVisible(\"F_D\",true,true);\n  //app.setVisible(\"F_E\",true,true);\n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n})\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are&nbsp;the reactions at $A$ and $B$?</p>\n<p>$A= $ [[0]]&nbsp;$\\qquad B = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(getGGB(\"F_A\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(getGGB(\"F_B\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum internal load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$V_{max}= $ [[0]]&nbsp;$\\qquad M_{max}= $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "V_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  getGGB(safe(\"V_{max}\"))\n\nVmin:\n   getGGB(safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "M_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n  getGGB(safe(\"M_{max}\"))\n\nMmin:\n   getGGB(safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}], "allowPrinting": true, "navigation": {"allowregen": true, "reverse": true, "browse": true, "allowsteps": true, "showfrontpage": false, "showresultspage": "oncompletion", "navigatemode": "menu", "onleave": {"action": "none", "message": ""}, "preventleave": false, "startpassword": ""}, "timing": {"allowPause": true, "timeout": {"action": "none", "message": ""}, "timedwarning": {"action": "none", "message": ""}}, "feedback": {"showactualmark": true, "showtotalmark": true, "showanswerstate": true, "allowrevealanswer": true, "advicethreshold": 0, "intro": "", "reviewshowscore": true, "reviewshowfeedback": true, "reviewshowexpectedanswer": true, "reviewshowadvice": true, "feedbackmessages": []}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "extensions": ["/srv/numbas/media/user-extensions/extracted/41/geogebra", "/srv/numbas/media/user-extensions/extracted/55/quantities", "/srv/numbas/media/user-extensions/extracted/98/weh"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/distributedload_4GkDwAm.ggb", "/srv/numbas/media/question-resources/distributedload_4GkDwAm.ggb"], ["question-resources/VM1_cwT2ujZ.ggb", "/srv/numbas/media/question-resources/VM1_cwT2ujZ.ggb"], ["question-resources/VM3.ggb", "/srv/numbas/media/question-resources/VM3.ggb"], ["question-resources/VM2.ggb", "/srv/numbas/media/question-resources/VM2.ggb"], ["question-resources/VM4.ggb", "/srv/numbas/media/question-resources/VM4.ggb"]]}